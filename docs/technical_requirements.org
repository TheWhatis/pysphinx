#+TITLE: Техническое задание
#+AUTHOR: Whatis
#+EMAIL: anton-gogo@mail.ru

#+DESCRIPTION: Техническое задание для создание пакета sphinx-python
#+KEYWORDS: python, sphinx, docstring, python-mode, doc string, easypeasy
#+LANGUAGE: ru

* 1. Цель проекта
Цель проекта: /разработать пакет для/ *Emacs* (далее Пакет), который
позволит автоматически проставлять шаблон =Python Docstring= в формате /reStructuredText (ReST)/ по
определенным сочетаниям клавиш

** Например:
К этой функции добавится
#+begin_src python
  def foo(x, y: float, j: dict = "Default") -> str:
      pass
#+end_src

вот такой =docstring=
#+begin_src python
  def foo(x, y: float, j: str = "Default"):
   """
   Function Title;
   ---------------
   .. Function multistring
      Description


   :param x: ``Any``
       .. This is description argument;

   :param y: ``float``
       .. This is description argument;

   :param j: ``str``.. "Default"
       .. This is description argument;

   :return: ``str``
      .. This is description returns value

   ,*Examples:*
   ::
       .. include:: path/to/file.rst
   """
       pass
#+end_src


* 2. Описание Пакета
Для начала надо будет сделать функции, которые подставляют
статичный шаблон (без возможности выбрать его блоки).

А в дальнейшем уже расширить Пакет и добавить возможность
/выбора блоков шаблона/ + добавить опциаональные блоки.
А также изменения языка шаблона.

Ну а сейчас эти функции будут автоматически парсить аргументы, типизацию и
значения по умолчанию для подставки этих значений в описание (см.выше Пример)

*** Пакет состоит из следующих основных функций:
1. Создание шаблона для функций
2. Создание шаблона для классов
3. Создание шаблона для методов класса
4. Проверка проставки правильных уровней заголовков
   В зависимости от того, насколько сильная вложенность функций/классов/методов
     - настолько будет различаться уровень заголовков ::
       # Будет анализ всего python кода
       # file.py:
       # header 1;
       #  def...:
       #  header 2;
       #    def...:
       #    header 3;
** 2.1 Шаблон функций
*** Шаблон будет состоять из:
1. Заголовка
2. Описания
3. Списка аргументов, их значения и описание
4. Что возвращает функция и описание
5. Примеров использования
6. Опциональных блоков (*Дополнить*)
*** Пример (см.выше Пример)
** 2.2 Шаблон классов
*** Шаблон будет состоять из:
1. Заголовка
2. Описания
3. Списка атрибутов и их значения
4. Что возвращает класс
5. Примеров использования
6. Опциональных блоков (*Дополнить*)

*** Пример:
К этому классу добавится
#+begin_src python
  class MyClass:
      x = "String"
      y: float
      j: str

      def __init__(self):
	  pass
#+end_src

Вот такой =docstring=
#+begin_src python
  class MyClass:
      """
	Class Title;
	------------
	.. Class multistring
	   Description


	:param x: ``Any`` .. "Default"
	    .. This is description attribute;

	:param y: ``float``
	    .. This is description attribute;

	:param j: ``str``
	    .. This is description attribute;


	:return: ``MyClass``
	   .. This is description returns value


	,*Examples:*
	::
	    .. include:: path/to/file.rst
	"""
      x = "String"
      y: float
      j: str

      def __init__(self):
	  pass
#+end_src
** 2.3 Шаблон методов классов
*** Шаблон будет состоять из:
1. Заголовка
2. Описания
3. Списка аргументов и их значения
4. Что возвращает
5. Примеров использования
6. Опциональных блоков (*Дополнить*)

*** Пример:
К этому методу добавится
#+begin_src python
  def my_class_method(self, x, y: float, j: str = "Default"):
      pass
#+end_src

вот такой =docstring=
#+begin_src python
  def my_class_method(self, x, y: float, j: str = "Default") -> float:
       """
       Method Class Title;
       ~~~~~~~~~~~~~~~~~~~
       .. Method Class multistring
	  Description


       :param x: ``Any``
	   .. This is description attribute;

       :param y: ``float``
	   .. This is description attribute;

       :param j: ``str`` .. "Default"
	   .. This is description attribute;


       :return: ``float``
	  .. This is description returns value


       ,*Examples:*
       ::
	   .. include:: path/to/file.rst
       """
	   pass
#+end_src
** 2.4 Проставка правильных заголовков
*** Анализ файла и проставка заголовков
*** Пример:
Допустим у нас есть код:
#+begin_src python
  """
  Example python code;
  ====================

  .. Description python module/code
  """


  def foo(x, y: float, j: str = "Default"):
      """
	Function Title;
	---------------
	.. Function multistring
	   Description


	:param x: ``Any``
	    .. This is description argument;

	:param y: ``float``
	    .. This is description argument;

	:param j: ``str``.. "Default"
	    .. This is description argument;


	:return: ``str``
	   .. This is description returns value


	,*Examples:*
	::
	    .. include:: path/to/file.rst
	"""
	    pass
#+end_src

И Завернем функцию в другую функцию (Обязательно см.код) ↓
#+begin_src python
  """
  Example python code;
  ====================

  .. Description python module/code
  """
  def wrap_foo():
      def foo(x, y: float, j: str = "Default"):
      """
	Function Title;
	~~~~~~~~~~~~~~~
#+end_src

*/--------------- -> ~~~~~~~~~~~~~~~/ Уровень заголовка изменился*
*Получается при изменении вложенности кода, изменяется уровень заголовка в* =docstring=
** Стек Пакета
*** Python
Версия Python: 3.10.5
- Модуль ast
*** Emacs Lisp
Версия Emacs: 27.2
- Модуль python
- Модуль json
- Модуль rx

* TODO Список задач
1. [X] Дописать *Стек Пакета*
2. [-] Модуль для парсинга конструкций python
   1. [X] Python скрипт, который возвращает данные
      - [X] Данные функций
      - [X] Данные классов
      - [X] Данные методов классов
   2. [X] Elisp фукнция, которая получает данные для отправки в след функцию
   3. [X] Elisp функция которая отправляет конструкции полученные из буфера и принимает данные конструкций
   4. [ ] Elisp модуль, который получает данные конструкций и создает шаблон
      - [ ] Шаблон функций
      - [ ] Шаблон классов
      - [ ] Шаблон методов классов
3. [ ] Elisp Модуль для подставки шаблонов в =docstring=
   - [ ] Шаблон функций
   - [ ] Шаблон классов
   - [ ] Шаблон методов классов
