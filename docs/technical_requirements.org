#+TITLE: Техническое задание
#+AUTHOR: Whatis
#+EMAIL: anton-gogo@mail.ru

#+DESCRIPTION: Техническое задание для создание пакета sphinx-python
#+KEYWORDS: python, sphinx, docstring, python-mode, doc string, easypeasy
#+LANGUAGE: ru

* 1. Цель проекта
  Цель проекта: /разработать пакет для/ *Emacs* (далее Пакет), который
  позволит автоматически вставлять шаблон =Python Docstring= в формате /reStructuredText (ReST)/ по
  определенным сочетаниям клавиш

  UPDATE: автоматически вставлять шаблон =Python Docstring= в форматах /javadoc, ReST, Google doc, numpydoc/

** Например:
   К этой функции добавится
   #+begin_src python
     def foo(x, y: float, j: dict = "Default") -> str:
	 pass
   #+end_src

   вот такой =docstring=
   #+begin_src python
     def foo(x, y: float, j: str = "Default"):
      """
      Function Title;
      ---------------
      .. Function multistring
	 Description


      :param x: ``Any``
	  .. This is description argument;

      :param y: ``float``
	  .. This is description argument;

      :param j: ``str``- default: "Default"
	  .. This is description argument;


      :returns: ``str``
	 .. This is description returns value


      ,*Examples:*
      ::
	  .. include:: path/to/file.rst
      """
	  pass
   #+end_src


* 2. Описание Пакета
  Для начала надо будет сделать функции, которые подставляют
  статичный шаблон (без возможности выбрать его блоки).

  А в дальнейшем уже расширить Пакет и добавить возможность
  /выбора блоков шаблона/ + добавить опциональные блоки.
  А также изменения языка шаблона.

  Ну а сейчас эти функции будут автоматически парсить аргументы, типизацию и
  значения по умолчанию для подставки этих значений в описание (см.выше Пример)
  
** Шаблон конструкций
*** Шаблон будет состоять из:
    1. Заголовка
    2. Описания
    3. Списка аргументов, их значения, типа и описания
    4. Что возвращает функция, её тип и описание
    6. Опциональных блоков (*Дополнить*)
*** Пример (см.выше Пример)
** Проставка правильных заголовков
*** Анализ файла и проставка заголовков
*** Пример:
    Допустим у нас есть код:
    #+begin_src python
      """
      Example python code;
      ====================

      .. Description python module/code
      """


      def foo(x, y: float, j: str = "Default"):
	  """
	    Function Title;
	    ---------------
	    .. Function multistring
	       Description


	    :param x: ``Any``
		.. This is description argument;

	    :param y: ``float``
		.. This is description argument;

	    :param j: ``str``- default: "Default"
		.. This is description argument;


	    :returns: ``str``
	       .. This is description returns value


	    ,*Examples:*
	    ::
		.. include:: path/to/file.rst
	    """
		pass
    #+end_src

    И Завернем функцию в другую функцию (Обязательно см.код) ↓
    #+begin_src python
      """
      Example python code;
      ====================

      .. Description python module/code
      """
      def wrap_foo():
	  def foo(x, y: float, j: str = "Default"):
	      """
	      Function Title;
	      ~~~~~~~~~~~~~~~
    #+end_src

    */--------------- -> ~~~~~~~~~~~~~~~/ Уровень заголовка изменился*
    *Получается при изменении вложенности кода, изменяется уровень заголовка в* =docstring=
** Стек Пакета
*** Python
    Версия Python: 3.10.5
    - Модуль ast
    - Модуль tokenize
    - Модуль typing
    - Модуль io
*** Emacs Lisp
    Версия Emacs: 27.2
    - Модуль python
    - Модуль json
    - Модуль rx
    - Модуль rest-parser (возможно сделать)
    - Модуль javadoc-parser (возможно сделать)
    - Модуль googledoc-parser (возможно сделать)
    - Модуль numpydoc-parser (возможно сделать)

* TODO Список задач (pysphinx)
  SCHEDULED: <2022-07-14 Ср 13:00-15:00>--<2022-09-10 Сб 13:00-15:00> DEADLINE: <2022-09-15 Чт>
  - State "TODO"       from "CANCELED"   [2022-07-25 Пн 12:55]
  - State "CANCELED"   from "TODO"       [2022-07-25 Пн 12:55]
  - State "TODO"       from "CANCELED"   [2022-07-24 Вс 17:08]
  - State "CANCELED"   from "TODO"       [2022-07-24 Вс 17:08]
  - State "TODO"       from "CANCELED"   [2022-07-23 Сб 01:22]
  - State "CANCELED"   from "TODO"       [2022-07-23 Сб 01:22]
  - State "TODO"       from "CANCELED"   [2022-07-22 Пт 14:56]
  - State "CANCELED"   from "TODO"       [2022-07-22 Пт 14:56]
  - [X] Дописать *Стек Пакета*
  - [X] Модуль для парсинга конструкций python
    1. [X] Python скрипт, который возвращает данные
       - [X] Данные функций
       - [X] Данные классов
       - [X] Данные методов классов
    2. [X] Elisp фукнция, которая получает данные для отправки в след функцию
    3. [X] Elisp функция которая отправляет конструкции полученные из буфера и принимает данные конструкций
    4. [X] Elisp, создать переменные для того, чтобы можно было править вид шаблона
       - [X] Для заголовка
       - [X] Для описания конструкции
       - [X] Для аргументов конструкции
       - [X] Для описания что будет возвращаться из нее
       - [X] Для шаблона примеров
       - [X] Для шаблона функций
       - [X] Для шаблона классов
       - [X] Для шаблона методов классов
       - [X] Для шаблона статичных методов классов
    5. [X] Elisp модуль, который получает данные конструкций и создает шаблон
       - [X] Шаблон функций
       - [X] Шаблон классов
       - [X] Шаблон методов классов
       - [X] Общая функция, которая определяет конструкцию и вызывает предыдущие
  - [X] Elisp Модуль для подставки шаблонов в =docstring=
    - [X] Шаблон функций
    - [X] Шаблон классов
    - [X] Шаблон методов классов
      - [X] Обычный методов
      - [X] Статических методов
      - [X] Методов класса (@classmethod)
    - [X] Создать общую функцию, которая будет определять какой шаблон вставить
  - [X] Написать документацию для Пакета
  - [-] Доработать Python модуль, чтобы он определял такие конструкции
    - [X] Статические методы (@staticmethod)
    - [X] Методы класса (@classmethod)
    - [X] Абстрактные классы (ABC, metaclass=ABCMeta)
    - [X] Абстрактные методы (@abstractmethod)
    - [X] Декорированные функции (@decorated)
    - [X] Декорированные методы (@decorated)
    - [X] Интерфейсы
    - [ ] Dataclass-ы
    - [ ] Именнованные картежи (NamedTuple)
    - [ ] Адаптеры
    - [ ] Декораторы
  - [-] Доработать Elisp модуль, чтобы определялись и имелись шаблоны для таких конструкций
    - [X] Статические методы (@staticmethod)
    - [X] Методы класса (@classmethod)
    - [X] Абстрактные классы (ABC, metaclass=ABCMeta)
    - [X] Абстрактные методы (@abstractmethod)
    - [X] Декорированные функции (@decorated)
    - [X] Декорированные методы (@decorated)
    - [X] Интерфейсы
    - [ ] Dataclass-ы
    - [ ] Именнованные картежи (NamedTuple)
    - [ ] Адаптеры
    - [ ] Декораторы
  - [ ] Создать пакет для анализа ReST разметки
    - [ ] Сделать токенизацию
      - [ ] Тип данных token, в котором будут значения (type name pos)
      - [ ] Тип данных token-type, в котором будут значения (name regex)
      - [ ] Класс lexer для анализа и токенизации (ну или что-то похожее на класс)
        - [ ] Список токенов;
        - [ ] Функция lex-analysis;
    - [ ] Класс parser для, собственно, разбора токенов, полученных из lexer (ну иищли что-то похожее на класс)
      - [ ] Заголовки и их уровень
      - [ ] Абзацы
      - [ ] Текст с оформлением (italic, bold)
      - [ ] Списки
      - [ ] Маркированные списки
      - [ ] Определения (:param key:...)
      - [ ] Комментарии (.. This multistring comment)
      - [ ] Вложенность списков, заголовков, комментариев и т.д.
  - [ ] Сделать поддержку других форматов документирования кода;
    - [ ] javadoc
      - [ ] Сделать пакет для анализа javadoc разметки;
        - [ ] tokenizer
        - [ ] Lexer
        - [ ] Parser
    - [ ] google doc
      - [ ] Сделать пакет для анализа google doc разметки;
        - [ ] tokenizer
        - [ ] Lexer
        - [ ] Parser
    - [ ] numpydoc
      - [ ] Сделать пакет для анализа numpydoc разметки;
        - [ ] tokenizer
        - [ ] Lexer
        - [ ] Parser
  - [ ] Маниторинг изменения вложенности кода и изменение уровня их заголовков;
    - [ ] ReST
    - [ ] javadoc
    - [ ] google doc
    - [ ] numpydoc
  - [ ] Сделать слияние уже существующих параметров в docstring и измененных в конструкции (то есть без полной перезаписи)
    - [ ] ReST
    - [ ] javadoc
    - [ ] google doc
    - [ ] numpydoc
  - [ ] Сделать разные шаблоны для разных типов конструкций
    - [ ] ReST
    - [ ] javadoc
    - [ ] google doc
    - [ ] numpydoc
  - [ ] Сделать подсветку синтаксиса для docstring
    - [ ] ReST
    - [ ] javadoc
    - [ ] google doc
    - [ ] numpydoc
  - [ ] Добавить доп инструменты для редактирования docstring (автоматическая проставка табуляций и т.п.)
    - [ ] ReST
    - [ ] javadoc
    - [ ] google doc
    - [ ] numpydoc
*** DONE pysphinx *bugfix*
    SCHEDULED: <2022-07-16 Сб 18:00-19:00>
    - State "DONE"       from "TODO"       [2022-07-24 Вс 17:16]
    SCHEDULED: <2022-07-16 Сб 20:01-21:00>
    + [X] При добавлении docstring, когда не найден уже сущесвтующий, но первым элементом идет какой-то код, он определяет его (в частности было print("this decorator")) как docstring и удаляет, при этом не добавляя новый
    + [X] Исправить баг с определением дублирующимися конструкциями (не должно быть таких ньюансов)
    + [X] вообще переделать определение ближайшей конструкции (сделать это через python - просто из lisp-а отправлять текущую позицию курсора)
    + [X] Исправить баг с вставкой docstring (при объявлении функции столбцом, он вставляет docstring внутрь объявления аргументов функции в "(arg1, arg2: int...args)")
